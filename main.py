import asyncio
import sqlite3
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties

API_TOKEN = '7550289263:AAGbz17PpdoqItrtA1tiWyc_f2mhP_nd220'
ADMIN_ID = 1125145067  # –£–∫–∞–∂–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

logging.basicConfig(level=logging.INFO)


bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

conn = sqlite3.connect("events.db")
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    categories TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS events (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT,
    date TEXT,
    location TEXT,
    category TEXT,
    description TEXT
)
""")
conn.commit()

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
FIXED_CATEGORIES = ["–ú—É–∑—ã–∫–∞", "–°–ø–æ—Ä—Ç", "–ö–∏–Ω–æ", "–¢–µ–∞—Ç—Ä", "–ù–∞—É–∫–∞", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]


def get_user_categories(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    cursor.execute("SELECT categories FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    return row[0].split(",") if row and row[0] else []


def set_user_categories(user_id, categories):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    categories_str = ",".join(categories)
    cursor.execute(
        "INSERT INTO users (user_id, categories) VALUES (?, ?) ON CONFLICT(user_id) DO UPDATE SET categories = ?",
        (user_id, categories_str, categories_str))
    conn.commit()


def get_categories():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    return FIXED_CATEGORIES


def generate_category_keyboard(user_id):
    """–°–æ–∑–¥–∞—ë—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, –≥–¥–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ—á–µ–Ω—ã"""
    user_categories = get_user_categories(user_id)
    buttons = []

    for category in get_categories():
        text = f"‚úÖ {category}" if category in user_categories else category
        buttons.append(InlineKeyboardButton(text=text, callback_data=f"category_{category}"))

    keyboard = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
    keyboard.append([InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="finish_selection")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@dp.message(Command("start"))
async def start(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    user_id = message.from_user.id
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=generate_category_keyboard(user_id))


@dp.callback_query(lambda c: c.data.startswith("category_"))
async def handle_category_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.split("_", 1)[1]
    user_id = callback.from_user.id

    user_categories = get_user_categories(user_id)

    if category in user_categories:
        user_categories.remove(category)
    else:
        user_categories.append(category)

    set_user_categories(user_id, user_categories)

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=generate_category_keyboard(user_id))
    await callback.answer()


@dp.callback_query(lambda c: c.data == "finish_selection")
async def finish_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'"""
    user_id = callback.from_user.id
    selected_categories = get_user_categories(user_id)

    if selected_categories:
        await callback.message.edit_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n<b>{', '.join(selected_categories)}</b>",
                                         parse_mode=ParseMode.HTML)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–±–æ—Ä–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π" –∏ "–í—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìå –ü–æ–¥–±–æ—Ä–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")],
                [KeyboardButton(text="üîÑ –í—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]
            ],
            resize_keyboard=True
        )
        await callback.message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=keyboard)
    else:
        await callback.message.edit_text("‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

    await callback.answer()


@dp.message(lambda message: message.text == "üìå –ü–æ–¥–±–æ—Ä–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
async def handle_pick(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ü–æ–¥–±–æ—Ä–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π'"""
    await show_events(message)


@dp.message(lambda message: message.text == "üîÑ –í—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
async def handle_choose_new_categories(message: types.Message):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–Ω–æ–≤–æ"""
    await start(message)


@dp.message(Command("events"))
async def show_events(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"""
    user_categories = get_user_categories(message.from_user.id)
    if not user_categories:
        await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å.")
        return

    cursor.execute("SELECT title, date, location FROM events WHERE category IN ({})".format(
        ','.join('?' * len(user_categories))), user_categories)
    events = cursor.fetchall()

    if events:
        events_list = "\n\n".join([f"üé≠ <b>{title}</b>\nüìÖ {date}\nüìç {location}" for title, date, location in events])
        await message.answer(f"üìÜ <b>–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b>\n\n{events_list}", parse_mode=ParseMode.HTML)
    else:
        await message.answer("–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.")


@dp.message(Command("admin_help"))
async def admin_help(message: types.Message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return

    admin_commands = """
<b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>
/list_events ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
/add_event - –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
/delete_event [–Ω–æ–º–µ—Ä] ‚Äì –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ ID
/notify_users [–Ω–æ–º–µ—Ä] - –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –ø–æ ID
"""
    await message.answer(admin_commands, parse_mode=ParseMode.HTML)


@dp.message(Command("list_events"))
async def list_events(message: types.Message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    cursor.execute("SELECT id, title, date, category FROM events")
    events = cursor.fetchall()
    if events:
        events_list = "\n".join([f"{event[0]}. {event[1]} - {event[2]} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {event[3]})" for event in events])
        await message.answer(f"–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:\n{events_list}")
    else:
        await message.answer("–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


@dp.message(Command("delete_event"))
async def delete_event(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        event_id = int(message.text.split(' ')[1])
        cursor.execute("DELETE FROM events WHERE id = ?", (event_id,))
        conn.commit()
        await message.answer(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º {event_id} —É–¥–∞–ª–µ–Ω–æ!")
    except:
        await message.answer("–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /delete_event <–Ω–æ–º–µ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è>")


from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State


class AddEvent(StatesGroup):
    choosing_category = State()
    entering_title = State()
    entering_date = State()
    entering_description = State()
    entering_location = State()


@dp.message(Command("add_event"))
async def add_event_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=category, callback_data=f"event_category_{category}")]
        for category in FIXED_CATEGORIES
    ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=keyboard)
    await state.set_state(AddEvent.choosing_category)


@dp.callback_query(lambda c: c.data.startswith("event_category_"))
async def choose_category(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    category = callback.data.split("_", 2)[2]
    await state.update_data(category=category)

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(AddEvent.entering_title)
    await callback.answer()


@dp.message(AddEvent.entering_title)
async def enter_title(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    await state.update_data(title=message.text)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.03.2024 18:00):")
    await state.set_state(AddEvent.entering_date)


@dp.message(AddEvent.entering_date)
async def enter_date(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    await state.update_data(date=message.text)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(AddEvent.entering_description)


@dp.message(AddEvent.entering_description)
async def enter_description(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    await state.update_data(description=message.text)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(AddEvent.entering_location)


@dp.message(AddEvent.entering_location)
async def enter_location(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"""
    event_data = await state.get_data()
    category = event_data["category"]
    title = event_data["title"]
    date = event_data["date"]
    description = event_data["description"]
    location = message.text

    cursor.execute("INSERT INTO events (title, date, category, description, location) VALUES (?, ?, ?, ?, ?)",
                   (title, date, category, description, location))
    conn.commit()

    await message.answer(
        f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n\n<b>{title}</b>\nüìÖ {date}\nüìç {location}\nüìñ {description}\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}",
        parse_mode=ParseMode.HTML)

    await state.clear()

@dp.message(Command("notify_users"))
async def notify_users(message: types.Message):
    """–û–ø–æ–≤–µ—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –ø–æ ID (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        event_id = int(message.text.split(" ")[1])  # –ü–æ–ª—É—á–∞–µ–º ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        cursor.execute("SELECT title, date, category, location, description FROM events WHERE id = ?", (event_id,))
        event = cursor.fetchone()

        if not event:
            await message.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        title, date, category, location, description = event

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤—ã–±—Ä–∞–≤—à–∏—Ö –¥–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        cursor.execute("SELECT user_id FROM users WHERE categories LIKE ?", (f"%{category}%",))
        users = cursor.fetchall()

        if not users:
            await message.answer(f"‚ö† –ù–∏–∫—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_text = (
            f"üì¢ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!</b>\n\n"
            f"üé≠ <b>{title}</b>\n"
            f"üìÖ {date}\n"
            f"üìç {location}\n"
            f"üìñ {description}\n\n"
            f"üî• –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ!"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sent_count = 0
        for user in users:
            try:
                await bot.send_message(user[0], notification_text, parse_mode=ParseMode.HTML)
                sent_count += 1
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")

        await message.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /notify_users <ID_–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è>")



async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
