import json
from datetime import datetime, timedelta, time
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMINS = [1125145067]  # –ó–∞–º–µ–Ω–∏—Ç–µ —á–∏—Å–ª–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ chat_id

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "7550289263:AAGbz17PpdoqItrtA1tiWyc_f2mhP_nd220"

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
EVENTS_FILE = "events.json"
USERS_FILE = "users.json"


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
def load_data(file):
    try:
        with open(file, "r", encoding="utf-8") as f:
            data = f.read().strip()
            return json.loads(data) if data else []
    except (FileNotFoundError, json.JSONDecodeError):
        save_data(file, [])  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
        return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON
def save_data(file, data):
    with open(file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user(chat_id):
    users = load_data(USERS_FILE)
    if chat_id not in users:
        users.append(chat_id)
        save_data(USERS_FILE, users)

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
def remove_past_events():
    events = load_data(EVENTS_FILE)
    today = datetime.now().date()
    updated_events = [event for event in events if datetime.strptime(event["date"], "%d.%m.%Y").date() >= today]
    if len(updated_events) != len(events):  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        save_data(EVENTS_FILE, updated_events)

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –¥–µ–Ω—å –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
def notify_users(context: CallbackContext):
    remove_past_events()  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    events = load_data(EVENTS_FILE)
    users = load_data(USERS_FILE)
    today = datetime.now().date()
    tomorrow = today + timedelta(days=1)

    for event in events:
        event_date = datetime.strptime(event["date"], "%d.%m.%Y").date()
        if event_date == tomorrow:
            message = (
                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏:\n\n"
                f"üéâ {event['title']}\nüìÖ –î–∞—Ç–∞: {event['date']}\n‚è∞ –í—Ä–µ–º—è: {event['time']}\nüìç –ú–µ—Å—Ç–æ: {event['place']}\n"
            )
            for user in users:
                context.bot.send_message(chat_id=user, text=message)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    add_user(chat_id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö. "
        "–í–≤–µ–¥–∏—Ç–µ /events, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∏–ª–∏ –∂–¥–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!"
    )

# –ö–æ–º–∞–Ω–¥–∞ /events –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
async def events_list(update: Update, context: CallbackContext):
    remove_past_events()  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    events = load_data(EVENTS_FILE)
    if events:
        text = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:\n\n"
        for event in events:
            text += f"üéâ {event['title']}\nüìÖ –î–∞—Ç–∞: {event['date']}\n‚è∞ –í—Ä–µ–º—è: {event['time']}\nüìç –ú–µ—Å—Ç–æ: {event['place']}\n\n"
    else:
        text = "–°–µ–π—á–∞—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç."
    await update.message.reply_text(text)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
async def add_event(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if chat_id not in ADMINS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return

    if context.args:
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            title, date, time, place = ' '.join(context.args).split(";")
            events = load_data(EVENTS_FILE)
            events.append({"title": title.strip(), "date": date.strip(), "time": time.strip(), "place": place.strip()})
            save_data(EVENTS_FILE, events)
            await update.message.reply_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ; –¥–∞—Ç–∞; –≤—Ä–µ–º—è; –º–µ—Å—Ç–æ")
    else:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ; –¥–∞—Ç–∞; –≤—Ä–µ–º—è; –º–µ—Å—Ç–æ")

async def get_id(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"–í–∞—à chat_id: {chat_id}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    remove_past_events()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ 9:00 —É—Ç—Ä–∞
    job_queue = application.job_queue
    job_queue.run_daily(notify_users, time=time(15, 0))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("events", events_list))
    application.add_handler(CommandHandler("add_event", add_event))
    application.add_handler(CommandHandler("get_id", get_id))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
